#+TITLE: Emacs configuration
#+AUTHOR: Arthur Mao
#+EMAIL: tiancaiamao@gmail.com
#+PROPERTY: header-args :results silent toc:nil

* Setup =use-package=

Ensure that use-package is installed.
If use-package isn't already installed, it's extremely likely that this is a
fresh installation! So we'll want to update the package repository and
install use-package before loading the literate configuration.

#+BEGIN_SRC emacs-lisp
  (when (not (package-installed-p 'use-package))
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

Download and install evil, 

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'evil)
    (package-install 'evil))
#+END_SRC

* UI Settings

** Use a better theme

#+BEGIN_SRC emacs-lisp
  (use-package monokai-theme
    :config
    (load-theme 'monokai t))
#+END_SRC

** Disable the startup message

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

** Tool bar and menu bar are useless, disable them.

#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+END_SRC

Make the =yes or no= shorter.

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Key Bindings

Yes, I use evil, the VIM keybinding makes life easier!

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-abbrev-expand-on-insert-exit nil
	  evil-want-C-u-scroll t
	  evil-want-integration t
	  ;; evil-collection will handle the key mapping, it requires this setting
	  evil-want-keybinding nil
	  )

    :config
    (evil-mode 1))
#+END_SRC


package =evil-collection= comes with the magit evil keybinding.

#+begin_src emacs-lisp
  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-setup-minibuffer t)
    :config
    ;; (setq evil-collection-mode-list
    ;;       '(ag dired magit mu4e which-key))
    (evil-collection-init))
#+end_src

The leader key binding!

#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :init
    (setq evil-leader/in-all-states 1)

    :config
    (global-evil-leader-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key
    ";" 'comment-or-uncomment-region
    "ff" 'find-file
    "fj" 'dired-jump
    "fs" 'save-buffer
    "bb" 'buffer-menu
    "bd" 'kill-buffer
    "bp" 'previous-buffer
    "bn" 'next-buffer
    "bc" 'switch-to-buffer
    "w" 'evil-window-map
    "w-" 'split-window-vertically
    "w/" 'split-window-horizontally
    "wj" 'windmove-down
    "wk" 'windmove-up
    "wh" 'windmove-left
    "wl" 'windmove-right
    "wd" 'delete-window
    "ww" 'other-window
    "xk" 'kill-buffer
    "xf" 'find-file
    "50" 'delete-frame
    "gg" 'magit-status
    "p" 'projectile-command-map
    "oe" 'eshell
    "mci" 'org-clock-in
    "mco" 'org-clock-out
    "mcg" 'org-clock-goto
    "mcr" 'org-clock-report
    "mc=" 'org-clock-display
    "mt" 'org-todo
    "ms" 'org-schedule
    "md" 'org-done
    "mq" 'org-set-tags-command
    )
#+END_SRC

* Programming language

** Go

#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

** Lisp


#+begin_src emacs-lisp
  (use-package elisp-mode
    :ensure nil
    :bind
    (:map emacs-lisp-mode-map
	  ("C-c C-c" . me/eval-region-dwim)
	  :map lisp-interaction-mode-map
	  ("C-c C-c" . me/eval-region-dwim))
    :hook
    (emacs-lisp-mode . outline-minor-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package lisp-mode
    :ensure nil
    :mode ((rx ".eld" eos) . lisp-data-mode))
#+end_src

** C

** Markdown

#+begin_src emacs-lisp
  (use-package markdown-mode
    :mode (rx (or "INSTALL" "CONTRIBUTORS" "LICENSE" "README" ".mdx") eos)
    :bind
    (:map markdown-mode-map
	  ("M-n" . nil)
	  ("M-p" . nil))
    :hook
    (markdown-mode . me/hydra-set-super)
    :custom
    (markdown-asymmetric-header t)
    (markdown-split-window-direction 'right)
    :config
    (unbind-key "M-<down>" markdown-mode-map)
    (unbind-key "M-<up>" markdown-mode-map))
#+end_src

** YAML

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

* Project management

** projectile 

I'm not sure what it is for now, but I'll figure it out one day.

#+BEGIN_SRC emacs-lisp 
  (use-package projectile)
#+END_SRC 

** magit

Try magit

#+begin_src emacs-lisp
  (use-package magit
    :config
    (use-package with-editor)

    (setq magit-push-always-verify nil
	  git-commit-summary-max-length 50)

    (add-hook 'with-editor-mode-hook 'evil-insert-state))
#+end_src

#+BEGIN_SRC emacs-lisp 
(server-start)
#+END_SRC 

* Misc

#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/home/genius/go/bin/")))
#+END_SRC

This would make the 'e' shell alias focus on the new opened frame.

#+BEGIN_SRC emacs-lisp
(defun px-raise-frame-and-give-focus ()
  (when window-system
    (raise-frame)
    (x-focus-frame (selected-frame))
    (set-mouse-pixel-position (selected-frame) 4 4)
    ))
(add-hook 'server-switch-hook 'px-raise-frame-and-give-focus)
#+END_SRC
